*,
*::before,
*::after {
  box-sizing: border-box;
}

/* User this to show position for each section*/
/** {*/
/*  outline: 2px solid red;*/
/*}*/

:root {
  --clr-icons: #929292;
  --clr-text: #fff;
  --clr-bg-dark: #242424;
  --clr-bg-light: #3b3b3b;
  --clr-accent: #ff7600;
}

body {
  margin: 1em;
  background-color: var(--clr-bg-dark);
  color: var(--clr-text);
  line-height: 1.5;
  font-family: sans-serif;
}

img {
  max-width: 100%;
}

.btn {
  cursor: pointer;
  display: inline-block;

  border: 0;
  background: transparent;
  color: var(--clr-text);
  font-size: 1.125rem;
  padding: 0.5em;
  position: relative;
  align-self: start; /* when this is in a grid, it will make it align up vertically */
  justify-self: start; /* when this is in a grid, it will make it align left horizontally. justify-self only work for grid, not flexbox */
}

.btn::after {
  content: '';
  position: absolute;
  background: var(--clr-accent);
  height: 0.85em;
  width: 75%;
  top: 50%;
  left: 0;
  z-index: -1;
  transition: transform 175ms cubic-bezier(0.91, 0, 0.55, 1.64);
  transform-origin: bottom left;
}

.btn:hover::after,
.btn:focus::after {
  transform: scale(1.35, 1.85); /*width, height*/
}

.title {
  color: var(--clr-accent);
  text-transform: uppercase;
  margin: 0;
  line-height: 1;
  font-size: clamp(3rem, 10vw, 7rem);
}

.location {
  color: var(--clr-icons);
  margin: 0 0 1.5em;
  font-size: 1.5rem;
}

header {
  display: flex;
  align-items: center; /* vertically center */
  margin: 2em 0;
}

nav {
  /*outline: 2px solid red;*/
  flex-grow: 1; /* the same as width: 100%; */

  display: flex;
  justify-content: space-around;
}

.nav__link {
  color: var(--clr-text);
  text-transform: capitalize;
  text-decoration: none;
}

.nav__link:hover,
.nav__link:focus {
  color: var(--clr-accent);
}

.secondary-images {
  display: flex;
  gap: 0.5em;
}


footer {
  margin-top: 2em;
}

.social-links {
  display: flex;
  gap: 2em;
}

.social-link:hover,
.social-link:focus {
  opacity: 0.5;
}

@media (min-width: 800px) {
  body {
    margin: 0;
  }

  .main-grid {
    display: grid;
    grid-template-columns:
      minmax(1em, 1fr)
      repeat(3, minmax(10rem, 30rem))
      minmax(1em, 1fr);
    gap: 2em;
    position: relative;
  }

  header {
    grid-column: 2 / 5;
    display: grid;
    grid-template-columns: subgrid;
  }

  .nav {
    /* Because header is 2 /5 , so nav 2 / 5 means it will leave the first column to logo and take the rest of the space */
    grid-column: 2 / 5;
  }

  main {
    grid-column: 2 / -1;  /* -1 means goes all the way to the end */

    display: grid;
    /* this following in inherit all the previous grid-template-columns info from parent
       This does not meant it will divide by 5 again, but rather, it will just take the original
       of the parent columns, meant the subgrid will only have 4 columns because the parent
       only occupy 4 columns
    */
    grid-template-columns: subgrid;

    /* When the window is huge, all the left hand info: <p>, <button> etc, got shift upwards
       don't look nice, use grid-auto-rows to fix it.
    */
    grid-auto-rows: min-content;

    /*
       This will force .description to move from column 1/2 row 5/6 to column 1/2 row 3/4
       and <button> to move from column 2/3 row 5/6 to column 1/2 row 4/5
     */
    grid-auto-flow: dense;
  }

  main::after {
    content: '';
    position: absolute;
    background-color: var(--clr-bg-light);
    top: 0;
    bottom: 0;
    left: -2em; /* this is the same as the gap so the text will touch the border */
    right: -2em;
    grid-column: 3 / 5;
    z-index: -10;
  }

  .title {
    grid-column: 1 / 3;
    grid-row: 1;
  }

  .location,
  .description {
    grid-column:  1 / 2;
  }

  .primary-image {
    grid-column: 2 / -1;
    grid-row: 1 / span 4; /* make the image cover up <title><p><p><button> 4 elements */
    z-index: -1;
    height: 100%;
    max-height: 500px; /* this can stop the image to become a super tall image */
    width: min(100%, 1000px);
    object-fit: cover;
  }

  .secondary-images {
    grid-column:  2 / 4;
    margin-top: 4em;
  }

  footer {
    grid-column:  2 / 3;
  }
}

@media (min-width: 1200px) {
  main::after {
    grid-column: 3 / 4; /* 800px width: 3 / 5 */
  }

  .nav,
  .secondary-images {
    grid-column: 2 / 3; /* 800px width: 2 / 5 */
  }
}











